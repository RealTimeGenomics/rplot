<project name="RPlot" default="compile-test">

  <property name="build.sysclasspath" value="ignore"/>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

  <echo message="Building for ${user.name} on ${os.name}" />

  <!-- Build file for Cartesian SLIM. Other subprojects are not addressed -->
  <property file="${user.name}.${os.name}.build.properties" />
  <property file="${user.name}.build.properties" />

  <property name="rplot.sandbox.dir" location="${basedir}" />
  <property name="src.dir" location="src"/>
  <property name="test.dir" location="test"/>
  <property name="lib.dir" location="lib"/>
  <property name="dist.dir" location="dist"/>
  <property name="build.dir" location="build"/>
  <property name="build.src" location="${build.dir}/src"/>
  <property name="build.test" location="${build.dir}/test"/>
  <property name="build.junit" location="${build.dir}/junit"/>

  <property name="vcs.info.cmd" value="svn"/>
  <property name="vcs.info.args" value="info -r HEAD"/>

  <defaultexcludes add="**/.hg"/>
  <defaultexcludes add="**/.hg/**"/>

  <target name="class-clean" description="Delete only class compilation destination">
    <delete dir="${build.src}" />
    <delete dir="${build.test}" />
  </target>
  <target name="clean" depends="class-clean">
    <delete dir="${dist.dir}"/>
    <delete dir="${build.dir}"/>
  </target>

  <target name="init">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.junit}"/>
  </target>

  <target name="rplot-vcs-info" depends="init" unless="rplot.vcs.commit.revision">
    <exec executable="${vcs.info.cmd}" output="${build.dir}/tmprevision" dir="${rplot.sandbox.dir}">
      <arg line="${vcs.info.args}"/>
    </exec>
    <property prefix="rev" file="${build.dir}/tmprevision" />
    <property name="rplot.vcs.commit.revision" value="${rev.Revision}" />
<!--
    <exec executable="${vcs.info.cmd}" outputproperty="rplot.vcs.commit.revision" dir="${rplot.sandbox.dir}">
      <arg line="${vcs.info.args}"/>
    </exec>
-->
    <echo message="Sandbox bevision is ${rplot.vcs.commit.revision}"/>
  </target>


  <target name="compile-src" depends="init" description="Compiles all code in src.">
    <javac destdir="${build.src}" srcdir="${src.dir}" includes="**/*.java"  source="1.6" debug="true">
      <compilerarg value="-Xlint" />
      <compilerarg value="-Xlint:-serial" />
      <classpath>
        <pathelement path="${src.dir}"/>
        <fileset dir="${lib.dir}">
<!--          <include name="gzipfix.jar" /> -->
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="compile-test" depends="compile-src" description="Compiles all code in test.">
    <javac destdir="${build.test}" srcdir="${test.dir}" includes="**/*.java" source="1.6" debug="true">
      <compilerarg value="-Xlint" />
      <compilerarg value="-Xlint:-serial" />
      <classpath>
        <pathelement path="${build.src}"/>
        <pathelement path="${test.dir}"/>
        <fileset dir="${lib.dir}" includes="*.jar" />
      </classpath>
    </javac>
  </target>

  <target name="compile" depends="compile-test" description="Compile all Java source code."/>

  <target name="set-rplot-build-version" depends="init,rplot-vcs-info">
    <loadfile property="old-rplot.version" srcFile="${build.src}/rplot.version" failonerror="false"/>
    <if>
      <not>
        <equals arg1="${old-rplot.version}" arg2="${rplot.vcs.commit.revision}"/>
      </not>
      <then>
        <echo message="Setting rplot build revision to ${rplot.vcs.commit.revision}"/>
        <echo file="${build.src}/rplot.version" message="${rplot.vcs.commit.revision}"/>
        <tstamp> <format property="build.time" pattern="yyyy-MM-dd" /></tstamp>
        <echo file="${build.src}/build.time" message="${build.time}" />
      </then>
    </if>
  </target>

  <target name="RPlot.jar" depends="compile-src,compile-test,set-rplot-build-version" description="Version with all code.">
    <jar destfile="${build.dir}/RPlot.jar" duplicate="fail">
      <manifest>
        <attribute name="Main-Class" value="com.reeltwo.plot.demo.SwingPlot"/>
        <attribute name="Implementation-Title" value="RPlot"/>
        <attribute name="Implementation-Vendor" value="NetValue Ltd"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
      <fileset dir="${build.src}">
        <include name="com/**/*.class"/>
        <include name="rplot.version"/>
        <include name="build.time" />
      </fileset>
      <fileset dir="${build.test}">
        <include name="com/**/*.class"/>
      </fileset>
      <fileset dir="${src.dir}">
        <include name="com/**/*.png"/>
      </fileset>
      <fileset dir="${test.dir}">
        <include name="com/reeltwo/**/*.txt"/>
        <include name="com/reeltwo/**/resources/*"/>
      </fileset>
      <zipfileset src="${lib.dir}/junit.jar" excludes="META-INF/**"/>
    </jar>
  </target>

  <target name="runalltests" depends="compile-src,compile-test" description="Run all tests">
    <java classname="com.reeltwo.plot.AllTests" fork="true" failonerror="true" dir="${build.junit}">
      <jvmarg value="-Xmx900M" />
      <jvmarg value="-server" />
      <jvmarg value="-ea" />
      <classpath>
        <pathelement path="${build.src}" />
        <pathelement path="${build.test}" />
        <pathelement path="${src.dir}" />
        <pathelement path="${test.dir}" />
        <fileset dir="${lib.dir}" includes="*.jar" />
      </classpath>
    </java>
  </target>

  <target name="runtest" depends="compile-src,compile-test" description="Run a test class. -Dtest.class=xxx">
    <fail unless="test.class" message="test.class property must be set"/>
    <java classname="junit.textui.TestRunner" fork="true" failonerror="true" dir="${build.junit}">
      <arg line="${test.class}" />
      <jvmarg value="-server" />
      <jvmarg value="-ea" />
      <classpath>
        <pathelement path="${build.src}" />
        <pathelement path="${build.test}" />
        <pathelement path="${src.dir}" />
        <pathelement path="${test.dir}" />
        <fileset dir="${lib.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </java>
  </target>

  <!-- Stuff for jumble -->
  <path id="test.classpath">
    <pathelement path="${build.src}" />
    <pathelement path="${build.internal}" />
    <pathelement path="${build.test}" />
    <pathelement path="${internal.dir}" />
    <pathelement path="${src.dir}" />
    <pathelement path="${test.dir}" />
    <fileset dir="${lib.dir}" includes="*.jar" />
  </path>

  <property name="test.classpath" refid="test.classpath" />


  <!-- checkstyle -->
  <taskdef resource="checkstyletask.properties" classpath="${lib.dir}/checkstyle-5.5-all.jar:.cvscheck/checkstyle-extra-checks.jar" />
  <property name="checkstyle.suppressions.file" location=".cvscheck/checkstyle_suppressions.xml" />
  <target name="checkstyle" depends="compile" description="Run checkstyle on all source code.">
    <checkstyle config=".cvscheck/checkstyle_config.xml" classpathref="test.classpath">
      <fileset dir="src" includes="**/*.java" />
      <fileset dir="test" includes="**/*.java" />
      <formatter type="plain" />
    </checkstyle>
  </target>

  <target name="javadoc" depends="compile-src" description="Build javadocs">
    <javadoc sourcepath="${src.dir}" destdir="${build.dir}/javadocs" source="1.5"
             Author="true" Version="true" Package="true" useexternalfile="true" additionalparam="-quiet">
      <tag name="has" enabled="false"/>
      <tag name="assoc" enabled="false"/>
      <tag name="depend" enabled="false"/>
      <tag name="composed" enabled="false"/>
      <tag name="minOccurs" enabled="false"/>
      <tag name="maxOccurs" enabled="false"/>
      <tag name="nillable" enabled="false"/>
      <tag name="nillableContainer" enabled="false"/>
      <tag name="minOccursContainer" enabled="false"/>
      <tag name="length" enabled="false"/>
      <tag name="minLength" enabled="false"/>
      <tag name="maxLength" enabled="false"/>
      <tag name="enumeration" enabled="false"/>
      <tag name="pattern" enabled="false"/>
      <tag name="minExclusive" enabled="false"/>
      <tag name="maxExclusive" enabled="false"/>
      <tag name="minInclusive" enabled="false"/>
      <tag name="maxInclusive" enabled="false"/>
        <classpath>
          <fileset dir="${lib.dir}" includes="*.jar" />
        </classpath>
    </javadoc>
  </target>

</project>
